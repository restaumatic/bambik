module ViewModel
  ( Order
  , NameInformal
  , NameFormal
  , Fulfillment
  , Address
  , ShortId
  , UniqueId
  , uniqueId
  , shortId
  , customer
  , paid
  , short
  , unique
  , firstName
  , lastName
  , forename
  , surname
  , fulfillment
  , table
  , time
  , address
  , dineIn
  , takeaway
  , delivery
  , isDineIn
  , isTakeaway
  , isDelivery
  , formal
  , paymentStatus
  , fulfillmentData
  , submitOrder
  , firstNameCaption
  , lastNameCaption
  , forenameCaption
  , surnameCaption
  , shortCaption
  , uniqueCaption
  , shortIdCaption
  , uniqueIdCaption
  , paidCaption
  , dineInCaption
  , takeawayCaption
  , deliveryCaption
  , tableCaption
  , timeCaption
  , addressCaption
  , fullfilmentCaption
  , orderCaption
  , orderId
  , orderIdCaption
  , orderIdText
  , customerCaption
  , submitOrderCaption
  , orderSubmittedCaption
  , informalCaption
  , formalCaption
  , idCaption
  , orderTitle
  , areYouSureText
  , orderSummary
  , defaultOrder
  ) where
  
import Prelude

import Data.Array (intercalate)
import Data.Profunctor.Optics
import Data.Maybe (Maybe(..), fromMaybe)
import Effect (Effect)
import Effect.Console (log)

type Order =
  { uniqueId :: UniqueId
  , shortId :: ShortId
  , customer :: NameInformal
  , paid :: Boolean
  , fulfillment :: Fulfillment
  }

type ShortId = String

type UniqueId = String

type NameInformal =
  { firstName :: String
  , lastName :: String
  }

type NameFormal =
  { forename :: String
  , surname :: String
  }

data Fulfillment
  = DineIn { table :: Table }
  | Takeaway { time :: Time }
  | Delivery { address :: Address }

type Table = String

type Time = String

type Address = String

type OrderId = { short :: String, unique :: String}

-- could be generated by compiler

uniqueId = field @"uniqueId"

shortId = field @"shortId"

customer = field @"customer"

paid = field @"paid"

firstName = field @"firstName"

lastName = field @"lastName"

forename = field @"forename"

surname =  field @"surname"

fulfillment =  field @"fulfillment"

table =  field @"table"

time =  field @"time"

address =  field @"address"

unique = field @"unique"

short = field @"short"

dineIn :: Constructor { table :: Table } Fulfillment
dineIn = constructor "dineIn" DineIn (case _ of
  DineIn c -> Just c
  _ -> Nothing)

takeaway :: Constructor { time :: String } Fulfillment
takeaway = constructor "takeaway" Takeaway (case _ of
  Takeaway c -> Just c
  _ -> Nothing)

delivery :: Constructor { address :: Address } Fulfillment
delivery = constructor "delivery" Delivery (case _ of
  Delivery c -> Just c
  _ -> Nothing)

-- cannot be generated by compiler

isDineIn :: Iso (Maybe Fulfillment) Fulfillment
isDineIn = iso' (case _ of
  d@(DineIn _) -> Just d
  _ -> Nothing) (fromMaybe ( DineIn { table: "1"}))

isTakeaway :: Iso (Maybe Fulfillment) Fulfillment
isTakeaway = iso' (case _ of
  t@(Takeaway _) -> Just t
  _ -> Nothing) (fromMaybe (Takeaway { time: "15:30"}))

isDelivery :: Iso (Maybe Fulfillment) Fulfillment
isDelivery = iso' (case _ of
  d@(Delivery _) -> Just d
  _ -> Nothing) (fromMaybe (Delivery { address: "Mulholland Drive 2001, Los Angeles" }))

formal :: Iso NameFormal NameInformal
formal = iso "formal" toFormal toInformal
  where
    toFormal :: NameInformal -> NameFormal
    toFormal { firstName: forename, lastName: surname } = { forename, surname }
    toInformal :: NameFormal -> NameInformal
    toInformal { forename: firstName, surname: lastName } = { firstName, lastName }

paymentStatus :: Projection String Boolean
paymentStatus = projection if _ then "paid" else "NOT PAID"

fulfillmentData :: forall p. ChProfunctor p => Strong p => Choice p => ProfunctorPlus p => p String String -> p Fulfillment Fulfillment
fulfillmentData text =
  ( (text # static "dine in at table " ^ text) # table # dineIn
  ^ (text # static "takeaway at " ^ text) # time # takeaway
  ^ (text # static "delivery to " ^ text) # address # delivery )

submitOrder :: Order -> Effect Unit
submitOrder = log <<< case _ of
  { uniqueId, shortId, customer, paid, fulfillment } -> "submitted order: " <> intercalate "|" [uniqueId, shortId, customer.firstName, customer.lastName, if paid then "paid" else "not paid", case fulfillment of
    (DineIn { table }) -> "dinein|" <> table
    (Takeaway { time }) -> "takeaway|" <> time
    (Delivery { address }) -> "delivery|\"" <> address <> "\""
  ]

firstNameCaption :: Constant String
firstNameCaption = constant "First name"

lastNameCaption :: Constant String
lastNameCaption = constant "Last name"

forenameCaption :: Constant String
forenameCaption = constant "Forename"

surnameCaption :: Constant String
surnameCaption = constant "Surname"

shortCaption :: Constant String
shortCaption = constant "Short"

uniqueCaption :: Constant String
uniqueCaption = constant "Unique"

idCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
idCaption text = text # static "Identifier"

shortIdCaption :: Constant String
shortIdCaption = constant "Short ID"

uniqueIdCaption :: Constant String
uniqueIdCaption = constant "Unique ID"

paidCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
paidCaption text = text # static "Paid"

dineInCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
dineInCaption text = text # static "Dine in"

takeawayCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
takeawayCaption text = text # static "Takeaway"

deliveryCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
deliveryCaption text = text # static "Delivery"

tableCaption :: Constant String
tableCaption = constant "Table"

timeCaption :: Constant String
timeCaption = constant "Time"

addressCaption :: Constant String
addressCaption = constant "Address"

fullfilmentCaption :: Constant String
fullfilmentCaption = constant "Fullfilment"

orderCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
orderCaption text = text # static "Order"

submitOrderCaption :: forall p. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p Order Order
submitOrderCaption text =
  ( text # static "Submit order "
  ^ text # shortId )

orderSubmittedCaption :: forall p. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p Order Order
orderSubmittedCaption text =
  ( text # static "Order "
  ^ text # shortId
  ^ text # static " submitted" )

--

orderId :: Lens' OrderId Order
orderId = lens' "orderId" (case _ of
  { uniqueId, shortId} -> { short: shortId, unique: uniqueId }) (\id -> case _ of
    { short, unique } -> id { shortId = short, uniqueId = unique })

orderIdCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
orderIdCaption text = text # static "Order ID"

customerCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
customerCaption text = text # static "Customer"

informalCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
informalCaption text = text # static "Informal"

formalCaption :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
formalCaption text = text # static "Formal"

orderIdText :: forall p. ChProfunctor p => Strong p => Choice p => ProfunctorPlus p => (forall a. p String a) -> p OrderId OrderId
orderIdText text = text # short ^ text # static " (" ^ text # unique ^ text # static ")"

orderTitle :: forall p. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p Order Order
orderTitle text = text # static "Order " ^ text # shortId

areYouSureText :: forall p a. ChProfunctor p => ProfunctorPlus p => Strong p => p String String -> p a a
areYouSureText text = text # static "Are you sure?"

orderSummary :: forall p. ChProfunctor p => ProfunctorPlus p => Strong p => Choice p => p String String -> p Order Order
orderSummary text =
  ( text # static "Summary: Order "
  ^ text # shortId
  ^ text # static " (uniquely "
  ^ text # uniqueId
  ^ text # static ") for "
  ^ ( text # firstName
    ^ text # static " "
    ^ text # lastName
      ^ ( text # static " (formally "
        ^ text # surname
        ^ text # static " "
        ^ text # forename
        ^ text # static ")" ) # formal ) # customer
  ^ text # static ", fulfilled as "
  ^ fulfillmentData text # fulfillment )

--

defaultOrder :: Order
defaultOrder =
  { uniqueId: "71287"
  , shortId: "7"
  , customer:
    { firstName: "David"
    , lastName: "Lynch"
    }
  , paid: true
  , fulfillment: DineIn { table: "1" }
  }

