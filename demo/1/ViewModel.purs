module ViewModel
  ( Order
  , CustomerInformal
  , CustomerFormal
  , Fulfillment
  , Address
  , ShortId
  , UniqueId
  , uniqueId
  , shortId
  , orderedBy
  , paid
  , short
  , unique
  , firstName
  , lastName
  , forename
  , surname
  , fulfillment
  , table
  , time
  , address
  , dineIn
  , takeaway
  , delivery
  , isDineIn
  , isTakeaway
  , isDelivery
  , formal
  , paymentStatus
  , fulfillmentData
  , submitOrder
  , firstNameCaption
  , lastNameCaption
  , forenameCaption
  , surnameCaption
  , shortCaption
  , uniqueCaption
  , shortIdCaption
  , uniqueIdCaption
  , paidCaption
  , dineInCaption
  , takeawayCaption
  , deliveryCaption
  , tableCaption
  , timeCaption
  , addressCaption
  , fullfilmentCaption
  , orderCaption
  , orderId
  , orderIdCaption
  , orderIdText
  , orderedByCaption
  , submitOrderCaption
  , orderSubmittedCaption
  , informalCaption
  , formalCaption
  , orderTitle
  , areYouSureText
  , orderSummary
  , defaultOrder
  ) where
  
import Prelude

import Data.Array (intercalate)
import Data.Maybe (Maybe(..), fromMaybe)
import Data.Profunctor.Optics
import Effect (Effect)
import Effect.Console (log)

type Order =
  { uniqueId :: UniqueId
  , shortId :: ShortId
  , orderedBy :: CustomerInformal
  , paid :: Boolean
  , fulfillment :: Fulfillment
  }

type ShortId = String

type UniqueId = String

type CustomerInformal =
  { firstName :: String
  , lastName :: String
  }

type CustomerFormal =
  { forename :: String
  , surname :: String
  }

data Fulfillment = DineIn { table :: Table } | Takeaway { time :: Time } | Delivery { address :: Address }

type Table = String

type Time = String

type Address = String

type OrderId = { short :: String, unique :: String}

-- could be generated by compiler

uniqueId = field @"uniqueId"

shortId = field @"shortId"

orderedBy = field @"orderedBy"

paid = field @"paid"

firstName = field @"firstName"

lastName = field @"lastName"

forename = field @"forename"

surname =  field @"surname"

fulfillment =  field @"fulfillment"

table =  field @"table"

time =  field @"time"

address =  field @"address"

unique = field @"unique"

short = field @"short"

dineIn :: Constructor { table :: Table } Fulfillment
dineIn = constructor "dineIn" DineIn (case _ of
  DineIn c -> Just c
  _ -> Nothing)

takeaway :: Constructor { time :: String } Fulfillment
takeaway = constructor "takeaway" Takeaway (case _ of
  Takeaway c -> Just c
  _ -> Nothing)

delivery :: Constructor { address :: Address } Fulfillment
delivery = constructor "delivery" Delivery (case _ of
  Delivery c -> Just c
  _ -> Nothing)

-- cannot be generated by compiler

isDineIn :: Iso (Maybe Fulfillment) Fulfillment
isDineIn = iso' (case _ of
  d@(DineIn _) -> Just d
  _ -> Nothing) (fromMaybe ( DineIn { table: "1"}))

isTakeaway :: Iso (Maybe Fulfillment) Fulfillment
isTakeaway = iso' (case _ of
  t@(Takeaway _) -> Just t
  _ -> Nothing) (fromMaybe (Takeaway { time: "15:30"}))

isDelivery :: Iso (Maybe Fulfillment) Fulfillment
isDelivery = iso' (case _ of
  d@(Delivery _) -> Just d
  _ -> Nothing) (fromMaybe (Delivery { address: "Mulholland Drive 2001, Los Angeles" }))

formal :: Iso CustomerFormal CustomerInformal
formal = iso "formal" toFormal toInformal
  where
    toFormal :: CustomerInformal -> CustomerFormal
    toFormal { firstName: forename, lastName: surname } = { forename, surname }
    toInformal :: CustomerFormal -> CustomerInformal
    toInformal { forename: firstName, surname: lastName } = { firstName, lastName }

paymentStatus :: Projection String Boolean
paymentStatus = projection if _ then "paid" else "NOT PAID"

fulfillmentData :: forall p. ChProfunctor p => Strong p => Choice p => ProfunctorPlus p => (forall a. p String a) -> p Fulfillment Fulfillment
fulfillmentData text =
  (text # static "dine in at table " ^ text # table # dineIn) ^
  (text # static "takeaway at " ^ text # time # takeaway) ^
  (text # static "delivery to " ^ text # address # delivery)

submitOrder :: Order -> Effect Unit
submitOrder = log <<< case _ of
  { uniqueId, shortId, orderedBy, paid, fulfillment } -> "submitted order: " <> intercalate "|" [uniqueId, shortId, orderedBy.firstName, orderedBy.lastName, if paid then "paid" else "not paid", case fulfillment of
    (DineIn { table }) -> "dinein|" <> table
    (Takeaway { time }) -> "takeaway|" <> time
    (Delivery { address }) -> "delivery|\"" <> address <> "\""
  ]

firstNameCaption :: Constant String
firstNameCaption = constant "First name"

lastNameCaption :: Constant String
lastNameCaption = constant "Last name"

forenameCaption :: Constant String
forenameCaption = constant "Forename"

surnameCaption :: Constant String
surnameCaption = constant "Surname"

shortCaption :: Constant String
shortCaption = constant "Short"

uniqueCaption :: Constant String
uniqueCaption = constant "Unique"

shortIdCaption :: Constant String
shortIdCaption = constant "Short ID"

uniqueIdCaption :: Constant String
uniqueIdCaption = constant "Unique ID"

paidCaption :: Constant String
paidCaption = constant "Paid"

dineInCaption :: Constant String
dineInCaption = constant "Dine in"

takeawayCaption :: Constant String
takeawayCaption = constant "Takeaway"

deliveryCaption :: Constant String
deliveryCaption = constant "Delivery"

tableCaption :: Constant String
tableCaption = constant "Table"

timeCaption :: Constant String
timeCaption = constant "Time"

addressCaption :: Constant String
addressCaption = constant "Address"

fullfilmentCaption :: Constant String
fullfilmentCaption = constant "Fullfilment"

orderCaption :: Constant String
orderCaption = constant "Order"

areYouSureText :: Constant ShortId
areYouSureText = constant "Are you sure?"

submitOrderCaption :: Projection String ShortId
submitOrderCaption = projection \sid -> "Submit order " <> sid

orderSubmittedCaption :: Projection String ShortId
orderSubmittedCaption = projection \sid -> "Order " <> sid <> " submitted"

--

orderId :: Lens' OrderId Order
orderId = lens' "orderId" (case _ of
  { uniqueId, shortId} -> { short: shortId, unique: uniqueId }) (\id -> case _ of
    { short, unique } -> id { shortId = short, uniqueId = unique })

orderIdCaption :: Constant String
orderIdCaption = constant "Order ID"

orderedByCaption :: Constant String
orderedByCaption = constant "Ordered by"

informalCaption :: Constant String
informalCaption = constant "Informal"

formalCaption :: Constant String
formalCaption = constant "Formal"

-- n-ary optics
orderIdText :: forall p. ChProfunctor p => Strong p => Choice p => ProfunctorPlus p => (forall a. p String a) -> p OrderId OrderId
orderIdText text = text # short ^ text # static " (" ^ text # unique ^ text # static ")"

-- n-ary optics
orderTitle :: forall p. ChProfunctor p => Strong p => Choice p => ProfunctorPlus p => (forall a. p String a) -> p Order Order
orderTitle text = text # static "Order " ^ text # shortId

orderSummary :: forall p. ChProfunctor p => Strong p => Choice p => ProfunctorPlus p => (forall a. p String a) -> p Order Order
orderSummary text =
  text # firstName # orderedBy ^
  text # orderCaption ^
  text # static " " ^
  text # short # orderId ^
  text # static " (uniquely " ^
  text # unique # orderId ^
  text # static ") for " ^
  ( text # firstName ^
    text # static " " ^
    text # lastName ^
      ( text # static " (formally " ^
        text # surname ^
        text # static " " ^
        text # forename ^
        text # static ")" ) # formal ) # orderedBy ^
  text # static ", " ^
  text # paymentStatus # paid ^
  text # static ", fulfilled as " ^
  (fulfillmentData text) # fulfillment

--

defaultOrder :: Order
defaultOrder =
  { uniqueId: "71287"
  , shortId: "7"
  , orderedBy:
    { firstName: "David"
    , lastName: "Lynch"
    }
  , paid: true
  , fulfillment: DineIn { table: "1" }
  }

