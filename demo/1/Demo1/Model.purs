module Demo1.Model where

import Data.Generic.Rep (class Generic)
import Data.Maybe (Maybe(..))
import Data.Show.Generic (genericShow)
import Data.String (length)
import Effect.Aff (Milliseconds(..), delay)
import Effect.Class (liftEffect)
import Effect.Console (log)
import Prelude (class Show, discard, pure, show, ($), (<<<), (<>))
import Widget (WidgetOptics, WidgetRWOptics, WidgetROOptics, action, constructor, field, iso, projection)

type Order =
  { orderId :: OrderId
  , shortId :: ShortId
  , customer :: NameInformal
  , payment :: Maybe Payment
  , fulfillment :: Fulfillment
  , remarks :: String
  , total :: String
  }

type OrderConfirmation =
  { shortId :: ShortId }

type ShortId = String

type OrderId = String

type NameInformal =
  { firstName :: String
  , lastName :: String
  }

type NameFormal =
  { forename :: String
  , surname :: String
  }

type Payment = { paid :: String }

data Fulfillment
  = DineIn { table :: Table }
  | Takeaway { time :: Time }
  | Delivery { address :: Address }

type Table = String

type Time = String

type Address = String

formal :: WidgetRWOptics NameFormal NameInformal
formal = iso "formal" toFormal toInformal
  where
    toFormal :: NameInformal -> NameFormal
    toFormal { firstName, lastName } = { forename: firstName, surname: lastName }
    toInformal :: NameFormal -> NameInformal
    toInformal { forename, surname } = { firstName: forename, lastName: surname }

type AuthToken = String

submitOrder :: forall a . WidgetOptics Boolean a SubmitOrder Order
submitOrder = action \{authToken, submittedOrder} -> do
  liftEffect $ log $ "submitting order " <> submittedOrder.orderId <> " with auth token " <> authToken
  delay (Milliseconds 1000.0)
  liftEffect $ log $ "submitted order"
  pure submittedOrder

loadOrder :: forall a . WidgetOptics Boolean a OrderId Order
loadOrder = action \orderId -> do
  liftEffect $ log $ "loading order"
  delay (Milliseconds 1000.0)
  liftEffect $ log $ "loaded order"
  pure
    { orderId
    , shortId: "7"
    , customer:
      { firstName: "David"
      , lastName: "Lynch"
      }
    , total: "12.30"
    , payment: Nothing
    , fulfillment: DineIn { table: "1" }
    , remarks: "I'm very hungry"
    }

-- could be generated by compiler

derive instance Generic Fulfillment _

instance Show Fulfillment where
  show = genericShow

orderId :: WidgetRWOptics String Order
orderId = field @"orderId"

shortId :: WidgetRWOptics String Order
shortId = field @"shortId"

customer :: WidgetRWOptics NameInformal Order
customer = field @"customer"

payment :: WidgetRWOptics (Maybe Payment) Order
payment = field @"payment"

firstName :: WidgetRWOptics String NameInformal
firstName = field @"firstName"

lastName :: WidgetRWOptics String NameInformal
lastName = field @"lastName"

forename :: WidgetRWOptics String NameFormal
forename = field @"forename"

surname :: WidgetRWOptics String NameFormal
surname =  field @"surname"

fulfillment :: WidgetRWOptics Fulfillment Order
fulfillment =  field @"fulfillment"

table :: WidgetRWOptics Table { table :: Table }
table =  field @"table"

time :: WidgetRWOptics Time { time :: Time }
time =  field @"time"

address :: WidgetRWOptics Address { address :: Address}
address =  field @"address"

remarks :: WidgetRWOptics String Order
remarks = field @"remarks"

total :: WidgetRWOptics String Order
total = field @"total"

paid :: WidgetRWOptics String Payment
paid = field @"paid"

dineIn :: WidgetRWOptics { table :: Table } Fulfillment
dineIn = constructor "DineIn" DineIn case _ of
  DineIn c -> Just c
  _ -> Nothing

takeaway :: WidgetRWOptics { time :: String } Fulfillment
takeaway = constructor "Takeaway" Takeaway case _ of
  Takeaway c -> Just c
  _ -> Nothing

delivery :: WidgetRWOptics { address :: Address } Fulfillment
delivery = constructor "Delivery" Delivery case _ of
  Delivery c -> Just c
  _ -> Nothing

type SubmitOrder =
  { authToken :: String
  , submittedOrder :: Order
  }

authToken = field @"authToken"

submittedOrder = field @"submittedOrder"

distance :: WidgetROOptics String Address
distance = projection $ show <<< length
